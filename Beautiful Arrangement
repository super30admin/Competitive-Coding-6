// Time Complexity : O(2^n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Approach:
//1) While backtracking, check for the given two conditions and if it has been visited by maintaining a visited array.
//2) proceed furthur by incrementing the result variable for all the arrangements which satisfies above conditions

class Solution {
    int result;
    public int countArrangement(int N) {
        int[] visited = new int[N];
        backtrack(N,visited,1);
        return result;
    }
    private void backtrack(int N, int[] visited,int index){
        //base
        if(index > N){
            result++;
            return;
        }
        for(int i=1; i<=N;i++){
            if( (i % index == 0 || index % i == 0) && (visited[i-1] == 0)){
                //action
                visited[i-1] = 1;
                //recurse
                backtrack(N, visited, index+1);
                //backtrack
                visited[i-1] = 0;
            }
        }
    }
}