/******************
LeetCode yes
Problem no
Time O(2^n)
Space O(n) (of recursion stack)



*******************/


class Solution {
    public List<String> letterCasePermutation(String S) {
        
        List<String> result = new ArrayList<>();
        char[] arr = S.toCharArray();
        helper(arr , result, 0);
        return result;
        
    }
    
    public void helper(char[] c , List<String> result , int index)
    {
        System.out.println("New Helper: " + String.valueOf(c));
        result.add(String.valueOf(c));
        // System.out.println(String.valueOf(c));
            
        for(int i =index;i< c.length;i++)
        {      
            char temp = c[i];
            
            if(Character.isDigit(c[i]))
                continue;
            
            else if(Character.isUpperCase(c[i]))
                 c[i] = Character.toLowerCase(c[i]);
            
            else if(Character.isLowerCase(c[i]))
                c[i] = Character.toUpperCase(c[i]);
          
            helper(c, result, i+1);
           
            c[i] = temp;
            
        }
    }
}
