class Solution:
    
    def fun(self, start, arr):
        #valid permutation 
        if(start == len(arr)):
            return 1;
        
        count = 0;
        for i in range(start, len(arr)):
            if(arr[i]%(start + 1) == 0 or (start+1)%arr[i] == 0):
                # swap the elements present at i and start
                arr[i], arr[start] = arr[start], arr[i];
                # invoke the same function from start + 1 index
                count += self.fun(start + 1, arr);
                # backtrack
                arr[i], arr[start] = arr[start], arr[i];
        return count;
            
    
    
    def countArrangement(self, n: int) -> int:
        arr = [i for i in range(1, n+1)];
        return self.fun(0, arr);
    
    '''
    time complexity = O(n!)
    space complexity = O(n)
    '''
